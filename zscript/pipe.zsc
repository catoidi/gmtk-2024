//zscript/pipe.zsc

Class Pipe : Actor
{
	//straight line pipe
	
	Default
	{
		Tag "$PIPE_HORIZONTAL";
		Health 4;
		Radius 32;
		Height 64;
		Mass 0x7FFFFFFF;
		+SOLID;
		+SHOOTABLE;
		+NOBLOOD;
		+NOGRAVITY;
	}
	
	Pipe End1, End2;
	int liquid;
	vector3 oldpos;
	int oldpostimer;
	
	override void tick()
	{
		Super.Tick();
		PipeTick();
		SpewLiquid();
	}
	
	override void CollidedWith(Actor other, bool passive)
	{
		if ((other is "PlayerPawn") && (oldpostimer < 1))
		{
			A_Die();
		}
	}
	
	virtual void PipeTick()
	{
		if (Pos == oldpos) {++oldpostimer;}
		else {oldpostimer = 0;}
		oldpos = Pos;
	
		if (liquid > 0) {--liquid;}
		double extraX = Pos.X % 64;
		if (extraX > 32) {extraX -= 64;}
		double extraY = Pos.Y % 64;
		if (extraY > 32) {extraY -= 64;}
		double extraZ = (Pos.Z + 8) % 64;
		if (extraZ > 32) {extraZ -= 64;}
		FLineTraceData side1, side2, collide;
		
		//collision check
		LineTrace(0, 8, 0, 0, height / 2, 0, 0, collide);
		if ((collide.HitActor is "Pipe") && (oldpostimer < 5))
		{
			SetOrigin((Pos.X, Pos.Y, Pos.Z + 64), false);
		}
		
		//front
		LineTrace(angle, 64, pitch, 0, height / 2, 0, 0, side1);
		if (side1.HitActor is "Pipe") 
		{
			End1 = Pipe(side1.HitActor);
			if (liquid > End1.liquid) {End1.liquid = liquid - 1;}
		}
		//back
		LineTrace(angle + 180, 64, pitch, 0, height / 2, 0, 0, side2);
		if (side2.HitActor is "Pipe") 
		{
			End2 = Pipe(side2.HitActor);
			if (liquid > End2.liquid) {End2.liquid = liquid - 1;}
		}
		
		
		if (oldpostimer < 5)
		{
			SetOrigin((Pos.X - extraX, Pos.Y - extraY, Pos.Z - extraZ), true);
		}
	}
	
	virtual void SpewLiquid(double xofs = 0, double yofs = 0, double zofs = 0)
	{
		bool openend = false;
		if (!End1) {openend = true;}
		if (!End2 && (liquid < 512)) {openend = true;}
		if ((liquid > 0) && (openend))
		{
			A_SpawnParticleEX("White", TexMan.CheckForTexture("SMOKA0"), STYLE_None, SPF_FULLBRIGHT | SPF_ROLL, 35, 8, 0, random(-72, 72), random(-72, 72), random(-72, 72), 0, 0, 0, 0, 0, -0.33, 1, -1, -0.25, random(0, 359));
			//A_SpawnItemEX("PipeLiquid", xofs, yofs, zofs, xofs / 10, yofs / 10, zofs / 10, 0, SXF_NOCHECKPOSITION, 128);
		}
	}
	
	States
	{
		Spawn:
			PLAY A -1;
			Stop;
		Death:
			TNT1 A 1
			{
				A_NoBlocking();
				A_SpawnItemEX("SafeBoom", 0, 0, 32, flags: SXF_NOCHECKPOSITION);
				A_SpawnItemEX("Metal", 0, 0, 32, flags: SXF_NOCHECKPOSITION);
			}
			Stop;
	}
}

Class PipePump : Pipe
{
	Default
	{
		Tag "$PIPE_PUMP";
	}

	override void PipeTick()
	{
		if (Pos == oldpos) {++oldpostimer;}
		else {oldpostimer = 0;}
		oldpos = Pos;
	
		if (liquid > 0) {--liquid;}
		double extraX = Pos.X % 64;
		if (extraX > 32) {extraX -= 64;}
		double extraY = Pos.Y % 64;
		if (extraY > 32) {extraY -= 64;}
		double extraZ = (Pos.Z + 8) % 64;
		if (extraZ > 32) {extraZ -= 64;}
		FLineTraceData side1, side2, collide;
		
		//collision check
		LineTrace(0, 8, 0, 0, height / 2, 0, 0, collide);
		if ((collide.HitActor is "Pipe") && (oldpostimer < 5))
		{
			SetOrigin((Pos.X, Pos.Y, Pos.Z + 64), false);
		}
		
		//top
		LineTrace(0, 64, pitch - 90, 0, height / 2, 0, 0, side1);
		if (side1.HitActor is "Pipe") 
		{
			End1 = Pipe(side1.HitActor);
			if (liquid > End1.liquid) {End1.liquid = liquid - 1;}
		}
		//bottom (liquid check)
		LineTrace(0, 64, pitch + 90, 0, height / 2, 0, 0, side2);
		if (side2.HitTexture == TexMan.CheckForTexture("WATER"))
		{
			liquid = 512;
		}
		else if (side2.HitActor is "Pipe")
		{
			End2 = Pipe(side2.HitActor);
			if (liquid > End2.liquid) {End2.liquid = liquid - 1;}
		}
		
		if (oldpostimer < 5)
		{
			SetOrigin((Pos.X - extraX, Pos.Y - extraY, Pos.Z - extraZ), true);
		}
	}
}

Class PipeBend : Pipe
{
	Default
	{
		Tag "$PIPE_BEND_7";
	}
	
	//Vertical Bend (L-shape)
	override void PipeTick()
	{
		if (Pos == oldpos) {++oldpostimer;}
		else {oldpostimer = 0;}
		oldpos = Pos;
	
		if (liquid > 0) {--liquid;}
		double extraX = Pos.X % 64;
		if (extraX > 32) {extraX -= 64;}
		double extraY = Pos.Y % 64;
		if (extraY > 32) {extraY -= 64;}
		double extraZ = (Pos.Z + 8) % 64;
		if (extraZ > 32) {extraZ -= 64;}
		FLineTraceData side1, side2, collide;
		
		//collision check
		LineTrace(0, 8, 0, 0, height / 2, 0, 0, collide);
		if ((collide.HitActor is "Pipe") && (oldpostimer < 5))
		{
			SetOrigin((Pos.X, Pos.Y, Pos.Z + 64), false);
		}
		
		//front
		LineTrace(angle, 64, pitch, 0, height / 2, 0, 0, side1);
		if (side1.HitActor is "Pipe") 
		{
			End1 = Pipe(side1.HitActor);
			if (liquid > End1.liquid) {End1.liquid = liquid - 1;}
		}
		//bottom (liquid check)
		LineTrace(0, 64, pitch + 90, 0, height / 2, 0, 0, side2);
		if (side2.HitTexture == TexMan.CheckForTexture("WATER"))
		{
			liquid = 512;
		}
		else if (side2.HitActor is "Pipe")
		{
			End2 = Pipe(side2.HitActor);
			if (liquid > End2.liquid) {End2.liquid = liquid - 1;}
			//console.printf("%s", "found bottom pipe :)");
		}
		
		if (oldpostimer < 5)
		{
			SetOrigin((Pos.X - extraX, Pos.Y - extraY, Pos.Z - extraZ), true);
		}
	}
}

Class PipeBendHorizontal : Pipe
{
	Default
	{
		Tag "$PIPE_BEND_HORIZONTAL";
	}

	override void Tick()
	{
		if (Pos == oldpos) {++oldpostimer;}
		else {oldpostimer = 0;}
		oldpos = Pos;
	
		if (liquid > 0) {--liquid;}
		double extraX = Pos.X % 64;
		if (extraX > 32) {extraX -= 64;}
		double extraY = Pos.Y % 64;
		if (extraY > 32) {extraY -= 64;}
		double extraZ = (Pos.Z + 8) % 64;
		if (extraZ > 32) {extraZ -= 64;}
		FLineTraceData side1, side2, collide;
		
		//collision check
		LineTrace(0, 8, 0, 0, height / 2, 0, 0, collide);
		if ((collide.HitActor is "Pipe") && (oldpostimer < 5))
		{
			SetOrigin((Pos.X, Pos.Y, Pos.Z + 64), false);
		}
		
		//front
		LineTrace(angle, 64, pitch, 0, height / 2, 0, 0, side1);
		if (side1.HitActor is "Pipe") 
		{
			End1 = Pipe(side1.HitActor);
			if (liquid > End1.liquid) {End1.liquid = liquid - 1;}
		}
		//right
		LineTrace(angle + 90, 64, pitch, 0, height / 2, 0, 0, side2);
		if (side2.HitActor is "Pipe") 
		{
			End2 = Pipe(side2.HitActor);
			if (liquid > End2.liquid) {End2.liquid = liquid - 1;}
		}
		
		if (oldpostimer < 5)
		{
			SetOrigin((Pos.X - extraX, Pos.Y - extraY, Pos.Z - extraZ), true);
		}
	}
}

Class PipeBendTop : Pipe
{
	Default
	{
		Tag "$PIPE_BEND_L";
	}

	//Vertical Bend (R-shape)
	override void PipeTick()
	{
		if (Pos == oldpos) {++oldpostimer;}
		else {oldpostimer = 0;}
		oldpos = Pos;
	
		if (liquid > 0) {--liquid;}
		double extraX = Pos.X % 64;
		if (extraX > 32) {extraX -= 64;}
		double extraY = Pos.Y % 64;
		if (extraY > 32) {extraY -= 64;}
		double extraZ = (Pos.Z + 8) % 64;
		if (extraZ > 32) {extraZ -= 64;}
		FLineTraceData side1, side2, collide;
		
		//collision check
		LineTrace(0, 8, 0, 0, height / 2, 0, 0, collide);
		if ((collide.HitActor is "Pipe") && (oldpostimer < 5))
		{
			SetOrigin((Pos.X, Pos.Y, Pos.Z + 64), false);
		}
		
		//top
		LineTrace(0, 64, pitch - 90, 0, height / 2, 0, 0, side2);
		if (side2.HitActor is "Pipe") 
		{
			End2 = Pipe(side2.HitActor);
			if (liquid > End2.liquid) {End2.liquid = liquid - 1;}
		}
		//front
		LineTrace(angle, 64, pitch, 0, height / 2, 0, 0, side1);
		if (side1.HitActor is "Pipe") 
		{
			End1 = Pipe(side1.HitActor);
			if (liquid > End1.liquid) {End1.liquid = liquid - 1;}
		}
		
		if (oldpostimer < 5)
		{
			SetOrigin((Pos.X - extraX, Pos.Y - extraY, Pos.Z - extraZ), true);
		}
	}
}

Class PipeLiquid : Actor
{
	Default
	{
		Height 0;
		Radius 0;
		Scale 0.25;
		+NOBLOCKMAP;
		+NOCLIP;
		+NOGRAVITY;
	}
	
	States
	{
		Spawn:
			SMOK A 1 A_FadeOut(0.05);
			Loop;
	}
}

Class FuelDuct : TooltipActor
{
	Default
	{
		Radius 32;
		Height 64;
		Mass 0x7FFFFFFF;
		+SOLID;
	}
	
	string statustooltip;
	
	override void Tick()
	{
		Super.Tick();
		
		statustooltip = "$FUELDUCT_NOPIPE";
		
		FLineTraceData side1;
		//front
		LineTrace(angle, 64, pitch, 0, height / 2, 0, 0, side1);
		if (side1.HitActor is "Pipe") 
		{
			let hitpipe = Pipe(side1.HitActor);
			
			if (hitpipe.liquid == 0) {statustooltip = "$FUELDUCT_EMPTY";}
			else 
			{	
				CallACS("AddFuel");
				statustooltip = "$FUELDUCT_EXTRACT";
			}
		}
	}
	
	States
	{
		Spawn:
			PLAY A -1;
			Stop;
	}
}