//zscript/builder.zsc

Class PipeBuilder : Weapon
{
	Default
	{
		Weapon.WeaponScaleY 1.0;
		Weapon.SlotNumber 2;
		+WEAPON.NOAUTOFIRE;
	}
	
	BuilderTrace trace;
	int pipemode;
	int pipeangle;
	
	action void PipeTrace()
	{
		if (invoker.owner is "PlayerPawn")
		{
			PlayerPawn plr = PlayerPawn(invoker.owner);
			FLineTraceData bdata;
			LineTrace(plr.angle, 256, plr.pitch, TRF_SOLIDACTORS, plr.player.mo.height * 0.5 - plr.player.mo.floorclip + plr.player.mo.AttackZOffset*plr.player.crouchFactor, 0, 0, bdata);
			vector3 newpos = bdata.HitLocation;
			if ((bdata.HitActor is "Pipe") || (bdata.HitActor is "FuelDuct"))
			{
				int chosenface = 0;
				if ((newpos.X - bdata.HitActor.Pos.X) >= 32) {chosenface = 0;}
				else if ((newpos.X - bdata.HitActor.Pos.X) <= -32) {chosenface = 1;}
				else if ((newpos.Y - bdata.HitActor.Pos.Y) >= 32) {chosenface = 2;}
				else if ((newpos.Y - bdata.HitActor.Pos.Y) <= -32) {chosenface = 3;}
				else if ((newpos.Z - (bdata.HitActor.Pos.Z + 32)) >= 32) {chosenface = 4;}
				else if ((newpos.Z - (bdata.HitActor.Pos.Z + 32)) <= -32) {chosenface = 5;}
				
				if ((chosenface < 4) && (newpos.Z > (bdata.HitActor.Z + 32)))
				{
					newpos.Z -= 64;
				}
				
				switch (chosenface)
				{
					case 0: newpos += (64, 0, 0); break;
					//case 1: newpos += (-64, 0, 0); break;
					case 2: newpos += (0, 64, 0); break;
					//case 3: newpos += (0, -64, 0); break;
					//case 4: newpos += (0, 0, 64); break;
					case 5: newpos += (0, 0, -64); break;
				}
				
				//console.printf("%d", chosenface);
			}
			
			
			if (!invoker.trace) 
			{
				A_SpawnItemEX("BuilderTrace", newpos.X, newpos.Y, newpos.Z, angle: 0, flags: SXF_ABSOLUTEPOSITION | SXF_ABSOLUTEANGLE | SXF_NOCHECKPOSITION | SXF_SETTARGET);
			}
			else 
			{
				invoker.trace.truepos = newpos;
				invoker.trace.bINVISIBLE = false;
			}
		}
	}
	
	//definitely a better way to do this but im under a time constraint here so cut me some slack
	action state DrawUIOverlay()
	{
		let returnvalue = string.format("UIOverlay%d", invoker.pipemode + 1);
		return invoker.FindStateByString(returnvalue);
	}
	action state DrawTextOverlay()
	{
		let returnvalue = string.format("TextOverlay%d", (invoker.pipeangle % 4) + 1);
		return invoker.FindStateByString(returnvalue);
	}

	States
	{	
		Select:
			IPAD A 1 A_Raise;
			Loop;
		Deselect:
			#### # 0
			{
				A_Overlay(2, "null");
				A_Overlay(3, "null");
				if (invoker.trace)
				{
					invoker.trace.bINVISIBLE = true;;
				}
			}
			IPAD K 1 A_Lower;
			Loop;
		Ready:
			IPAD A 0 A_Overlay(2, "UIOverlay", true);
			IPAD A 0 A_Overlay(3, "TextOverlay", true);
			IPAD A 1 
			{
				//A_Overlay(-2, "TextOverlay", true);
				//frame = invoker.pipemode + 1;
				//console.printf("%d", frame);
				A_WeaponReady(WRF_ALLOWRELOAD);
				PipeTrace();
			}
			Wait;
		Fire:
			#### # 1 
			{
				if (CountInv("Metal") == 0) {return invoker.FindState("NoAmmo");}
				if (invoker.trace)
				{
					bool placed = false;
					actor thing;
					[placed, thing] = invoker.trace.A_SpawnItemEX(invoker.trace.pipespawner, -1, angle: invoker.trace.angle, flags: SXF_ABSOLUTEANGLE);
					if (thing) 
					{
						A_StartSound("thunk", 0, pitch: frandom(0.8, 1.2));
						A_TakeInventory("Metal", 1);
						for (int i = 0; i < 16; ++i)
						{
							thing.A_SpawnParticleEX("White", TexMan.CheckForTexture("SMOKB0"), STYLE_NONE, SPF_ROLL, 35, random(8, 16), 0, random(-40, 40), random(-40, 40), random(-8, 72), 0, 0, 0, 0, 0, -0.33, 1, -1, 0, random(0, 359));
						}
					}
				}
				return invoker.FindState(null);
			}
			Goto Ready;
		AltFire:
			#### # 1 
			{
				if (invoker.pipemode < 4) {++invoker.pipemode;}
				else {invoker.pipemode = 0;}
				//frame = invoker.pipemode + 1;
				console.printf("Pipe Type: %d", invoker.pipemode);
			}
			Goto Ready;
		Reload:
			#### # 0 
			{
				++invoker.pipeangle;
				A_StartSound("scrape", 1);
				console.printf("Pipe Direction: %d", invoker.pipeangle % 4);
			}
			#### ######### 1 PipeTrace();
			Goto Ready;
		NoAmmo:
			#### # 1 A_OverlayOffset(PSP_WEAPON, 0, 4, WOF_ADD);
			#### #### 1 A_OverlayOffset(PSP_WEAPON, 0, -1, WOF_ADD);
			#### # 4;
			#### # 0 A_Jump(256, "Ready");
			Goto Ready;
		//warning: this code sucks
		UIOverlay:
			TNT1 A 1 DrawUIOverlay();
			Wait;
		UIOverlay1:
			IPAD B 1;
			#### # 0 DrawUIOverlay();
			Loop;
		UIOverlay2:
			IPAD C 1;
			#### # 0 DrawUIOverlay();
			Loop;
		UIOverlay3:
			IPAD D 1;
			#### # 0 DrawUIOverlay();
			Loop;
		UIOverlay4:
			IPAD E 1;
			#### # 0 DrawUIOverlay();
			Loop;
		UIOverlay5:
			IPAD F 1;
			#### # 0 DrawUIOverlay();
			Loop;
		TextOverlay:
			TNT1 A 1 DrawTextOverlay();
			Wait;
		TextOverlay1:
			IPAD G 1;
			#### # 0 DrawTextOverlay();
			Loop;
		TextOverlay2:
			IPAD H 1;
			#### # 0 DrawTextOverlay();
			Loop;
		TextOverlay3:
			IPAD I 1;
			#### # 0 DrawTextOverlay();
			Loop;
		TextOverlay4:
			IPAD J 1;
			#### # 0 DrawTextOverlay();
			Loop;
	}
}

Class BuilderTrace : Actor
{
	Default
	{
		Height 2;
		Radius 1;
		Renderstyle "Translucent";
		//Alpha 0.5;
		+BRIGHT;
		+NOCLIP;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+BRIGHT;
		+VISIBILITYPULSE;
	}
	
	vector3 truepos;
	string pipespawner;
	int alphatimer;
	
	virtual state GiveUp()
	{
		return ResolveState("Death");
	}
	
	override void tick()
	{
		alphatimer += 10;
		alpha = 0.5 + (sin(alphatimer) / 10);
	
		if (target.player.ReadyWeapon is "PipeBuilder")
		{
			PipeBuilder builder = PipeBuilder(target.player.ReadyWeapon);
			builder.trace = self;
			string pipeskin;
			switch (builder.pipemode)
			{
				case 0: 
					pipeskin = "cube.png";
					pipespawner = "Pipe";
					break;
				case 1: 
					pipeskin = "cube2.png";
					pipespawner = "PipeBend";
					break;
				case 2:
					pipeskin = "cube6.png";
					pipespawner = "PipeBendTop";
					break;
				case 3: 
					pipeskin = "cube4.png";
					pipespawner = "PipeBendHorizontal";
					break;
				case 4: 
					pipeskin = "cube3.png";
					pipespawner = "PipePump";
					break;
			}
			int bangle = ((builder.pipeangle * 90) - angle) / 2;
			angle += bangle;
			A_ChangeModel(pipespawner);
			
			
			double extraX = truepos.X % 64;
			if (extraX > 32) {extraX -= 64;}
			double extraY = truepos.Y % 64;
			if (extraY > 32) {extraY -= 64;}
			double extraZ = (truepos.Z + 8) % 64;
			if (extraZ > 32) {extraZ -= 64;}
			SetOrigin((truepos.X - extraX, truepos.Y - extraY, truepos.Z - extraZ), false);
			
			//console.printf("%d, %d, %d", Pos.X, Pos.Y, Pos.Z);
		}
	}
	
	States
	{
		Spawn:
			PLAY A 1;
			Loop;
		Death:
			#### # 1;
			Stop;
	}
}