class MyStandaloneGamePlayer : PlayerPawn
{
	Default
	{
		Speed 1;
		Health 100;
		Radius 16;
		Height 56;
		Mass 100;
		PainChance 255;
		Player.DisplayName "MyStandAloneGamePlayer";
		Player.CrouchSprite "PLYC";
		Player.ColorRange 144, 189;
		Player.Colorset 0, "$TXT_COLOR_GREEN", 144, 191, 144;
		Player.Colorset 1, "$TXT_COLOR_RED", 96, 143, 96;
		Player.Colorset 2, "$TXT_COLOR_BLUE", 192, 239, 192;
		Player.StartItem "OreDrill";
		Player.StartItem "PipeBuilder";
		Player.StartItem "Oxygen", 100;
		Player.StartItem "OxygenGiver";
		Player.StartItem "OxygenTaker";
	}
	
	int oxygentimer;
	bool jumped;
	bool dashed;
	int dashhold;
	bool doublejumped;
	int jumphold;
	
	virtual void DoDash()
	{
		if (jumped && !dashed && (dashhold == 0))
		{
			dashed = true;
			A_Recoil(-15);
			TakeInventory("Oxygen", 1);
			A_StartSound("whiff2", CHAN_AUTO);
		}
	}
	
	virtual void DoDoubleJump()
	{
		if (jumped && !doublejumped)
		{
			doublejumped = true;
			Vel.Z = jumpz;
			TakeInventory("Oxygen", 1);
			A_StartSound("jumppad", CHAN_AUTO);
		}
	}
	
	override void tick()
	{
		super.tick();
		if (isFrozen() == false)
		{
			if (CountInv("OxygenTaker") > 0)
			{
				++oxygentimer;
				if (oxygentimer >= 70)
				{
					if (CountInv("OxygenGiver") == 0)
					{
						if (CountInv("Oxygen") > 0)	{TakeInventory("Oxygen", 1);}
						else {DamageMobj(self, self, 3, 'Normal');}
					}
					else
					{
						GiveBody(5);
					}
					oxygentimer = 0;
				}
			}
			
			if (dashhold > 0) {--dashhold;}
			if (Pos.Z ~== FloorZ)
			{
				jumped = false;
				doublejumped = false;
				dashed = false;
			}
			
			if (jumped)
			{
				if (Player.Buttons & BT_SPEED)
				{
					DoDash();
				}
				else if ((Player.Buttons & BT_JUMP) && (jumphold < 1))
				{
					DoDoubleJump();
				}
			}
			
			if (Player.Buttons & BT_JUMP) 
			{
				jumped = true;
				++jumphold;
			}
			else if ((Pos.Z > FloorZ) && (!jumped)) {jumped = true;}
			else {jumphold = 0;}
		}
	}

	States
	{
	Spawn:
		PLAY A -1;
		Loop;
	See:
		PLAY ABCD 4;
		Loop;
	Missile:
		PLAY A 12;
		Goto Spawn;
	Melee:
		PLAY A 6 BRIGHT;
		Goto Missile;
	Pain:
		PLAY A 4;
		PLAY A 4 A_Pain();
		Goto Spawn;
	Death:
		PLAY A 0 A_PlayerSkinCheck("AltSkinDeath");
	Death1:
		PLAY A 10;
		PLAY A 10 A_PlayerScream();
		PLAY A 10 A_NoBlocking();
		PLAY AAA 10;
		PLAY A -1;
		Stop;
	XDeath:
		PLAY A 0 A_PlayerSkinCheck("AltSkinXDeath");
	XDeath1:
		PLAY A 5;
		PLAY A 5 A_XScream();
		PLAY A 5 A_NoBlocking();
		PLAY AAAAA 5;
		PLAY A -1;
		Stop;
	AltSkinDeath:
		PLAY A 6;
		PLAY A 6 A_PlayerScream();
		PLAY AA 6;
		PLAY A 6 A_NoBlocking();
		PLAY AAA 6;
		PLAY A -1;
		Stop;
	AltSkinXDeath:
		PLAY A 5 A_PlayerScream();
		PLAY A 0 A_NoBlocking();
		PLAY A 5 A_SkullPop();
		PLAY AAAAAA 5;
		PLAY A -1;
		Stop;
	}
}
